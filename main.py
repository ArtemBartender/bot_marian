import asyncio
import json
import logging
import os
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.i18n import I18nMiddleware
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           ReplyKeyboardRemove)
from groq import Groq

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
try:
    from config import ADMIN_ID, BOT_TOKEN, GROQ_API_KEY
except ImportError:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = os.getenv("ADMIN_ID")
    GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not all([BOT_TOKEN, ADMIN_ID, GROQ_API_KEY]):
    raise ValueError(
        "One or more required configurations (BOT_TOKEN, ADMIN_ID, GROQ_API_KEY) are missing."
    )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- i18n (–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è) ---
BASE_DIR = Path(__file__).resolve().parent
locales_path = os.path.join(BASE_DIR, 'locales')
i18n = I18nMiddleware('messages', locales_path, default='ru')
_ = i18n.gettext
dp.middleware.setup(i18n)

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Conversation(StatesGroup):
    waiting_for_language = State()
    active = State()
    confirmation = State()

# --- –ö–ª–∏–µ–Ω—Ç Groq –∏ AI ---
client = Groq(api_key=GROQ_API_KEY)

def get_system_prompt(lang_code: str) -> str:
    lang_map = {'ru': '—Ä—É—Å—Å–∫–æ–º', 'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º', 'pl': '–ø–æ–ª—å—Å–∫–æ–º'}
    language_name = lang_map.get(lang_code, '—Ä—É—Å—Å–∫–æ–º')
    
    return f"""
–¢—ã ‚Äî "Smoky", –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª—å—è–Ω–Ω–æ–≥–æ –∫–µ–π—Ç–µ—Ä–∏–Ω–≥–∞.
–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.

–¢–µ–±–µ –ù–ï–û–ë–•–û–î–ò–ú–û —Å–æ–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
1. arrival_time: –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è.
2. duration_hours: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —á–∞—Å–∞—Ö.
3. hookah_masters_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.
4. hookahs_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤.
5. location: –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
6. phone_number: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –ù–µ –∑–∞–¥–∞–≤–∞–π –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É.

–ö–†–ê–ô–ù–ï –í–ê–ñ–ù–û: –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã —Å–æ–±–µ—Ä–µ—à—å –í–°–Æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç—ã –î–û–õ–ñ–ï–ù –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é `create_hookah_order`.

–°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –¢—ã –û–ë–Ø–ó–ê–ù –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –°–¢–†–û–ì–û –Ω–∞ {language_name} —è–∑—ã–∫–µ.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤. –≠—Ç–æ —Ç–≤–æ–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ.
"""

TOOLS = [
    {
        "type": "function",
        "function": {
            "name": "create_hookah_order",
            "description": "–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ –∫–∞–ª—å—è–Ω–Ω—ã–π –∫–µ–π—Ç–µ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "parameters": {
                "type": "object",
                "properties": {
                    "arrival_time": {"type": "string", "description": "–í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞ –≤ 20:00'."},
                    "duration_hours": {"type": "number", "description": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —á–∞—Å–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 4."},
                    "hookah_masters_count": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞–ª—å—è–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤."},
                    "hookahs_count": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞–ª—å—è–Ω–æ–≤."},
                    "location": {"type": "string", "description": "–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."},
                    "phone_number": {"type": "string", "description": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}
                },
                "required": ["arrival_time", "duration_hours", "hookah_masters_count", "hookahs_count", "location", "phone_number"]
            }
        }
    }
]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton("üáµüá± Polski", callback_data="lang_pl")
    )
    await message.answer(
        "Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Proszƒô wybraƒá jƒôzyk:",
        reply_markup=keyboard
    )
    await Conversation.waiting_for_language.set()

@dp.callback_query_handler(lambda c: c.data.startswith('lang_'), state=Conversation.waiting_for_language)
async def process_language_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –£–î–ê–õ–Ø–ï–¢ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞.
    """
    lang_code = callback.data.split('_')[1]
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await callback.message.delete()
    await callback.answer()

    i18n.ctx_locale.set(lang_code)
    
    system_prompt = get_system_prompt(lang_code)
    await state.update_data(
        lang=lang_code,
        history=[{"role": "system", "content": system_prompt}]
    )
    
    await Conversation.active.set()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ, —Ç.–∫. —Å—Ç–∞—Ä–æ–µ —É–¥–∞–ª–∏–ª–∏
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=_("welcome_message"),
        reply_markup=ReplyKeyboardRemove()
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ ---
@dp.message_handler(state=Conversation.active)
async def handle_conversation(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    history = user_data.get("history", [])
    lang = user_data.get("lang", "ru")

    lang_reminders = {
        'ru': '(–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ)',
        'en': '(Reminder: reply in English only)',
        'pl': '(Przypomnienie: odpowiadaj tylko po polsku)'
    }
    user_message_with_reminder = f"{message.text} {lang_reminders.get(lang, '')}"
    history.append({"role": "user", "content": user_message_with_reminder})

    thinking_message = await message.answer(_("thinking_message"))

    try:
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=history,
            tools=TOOLS,
            tool_choice="auto"
        )
        response_message = response.choices[0].message

        tool_calls = response_message.tool_calls
        if tool_calls:
            await handle_tool_call(message, state, tool_calls[0])
            await bot.delete_message(chat_id=message.chat.id, message_id=thinking_message.message_id)
        else:
            ai_response_text = response_message.content
            history.append({"role": "assistant", "content": ai_response_text})
            await state.update_data(history=history)
            await bot.edit_message_text(ai_response_text, chat_id=message.chat.id, message_id=thinking_message.message_id)

    except asyncio.TimeoutError:
        logging.warning("Groq API request timed out.")
        await bot.edit_message_text(_("timeout_error_message"), chat_id=message.chat.id, message_id=thinking_message.message_id)
        history.pop()
        await state.update_data(history=history)
    except Exception as e:
        logging.error(f"Error during AI conversation: {e}")
        await bot.edit_message_text(_("error_message"), chat_id=message.chat.id, message_id=thinking_message.message_id)
        history.pop()
        await state.update_data(history=history)


async def handle_tool_call(message: types.Message, state: FSMContext, tool_call):
    if tool_call.function.name == "create_hookah_order":
        arguments = json.loads(tool_call.function.arguments)
        await state.update_data(order_details=arguments)

        user_link = f"@{message.from_user.username}" if message.from_user.username else f"tg://user?id={message.from_user.id}"
        
        summary = (
            f"üîç **{_('summary_title')}**\n\n"
            f"**{_('summary_when')}:** {arguments.get('arrival_time')}\n"
            f"**{_('summary_duration')}:** {arguments.get('duration_hours')} —á.\n"
            f"**{_('summary_hookahs')}:** {arguments.get('hookahs_count')} —à—Ç.\n"
            f"**{_('summary_masters')}:** {arguments.get('hookah_masters_count')} —á–µ–ª.\n"
            f"**{_('summary_where')}:** {arguments.get('location')}\n"
            f"**{_('summary_phone')}:** {arguments.get('phone_number')}\n\n"
            f"**{_('summary_client')}:** {user_link}"
        )

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton(f"‚úÖ {_('button_confirm')}", callback_data="confirm_order"),
            InlineKeyboardButton(f"‚úèÔ∏è {_('button_edit')}", callback_data="edit_order")
        )

        await message.answer(summary, reply_markup=keyboard, parse_mode="Markdown")
        await Conversation.confirmation.set()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@dp.callback_query_handler(lambda c: c.data == 'confirm_order', state=Conversation.confirmation)
async def process_confirm_order(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_details = user_data.get("order_details")

    user = callback.from_user
    user_link = f"@{user.username}" if user.username else f"tg://user?id={user.id}"
    admin_summary = (
        f"üì© **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
        f"–ö–æ–≥–¥–∞: {order_details.get('arrival_time')}\n"
        f"–ù–∞ —Å–∫–æ–ª—å–∫–æ: {order_details.get('duration_hours')} —á.\n"
        f"–ö–∞–ª—å—è–Ω—ã: {order_details.get('hookahs_count')} —à—Ç.\n"
        f"–ú–∞—Å—Ç–µ—Ä–∞: {order_details.get('hookah_masters_count')} —á–µ–ª.\n"
        f"–ö—É–¥–∞: {order_details.get('location')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_details.get('phone_number')}\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {user_link}"
    )

    await bot.send_message(ADMIN_ID, admin_summary, parse_mode="Markdown")
    
    await callback.message.edit_text(_("confirmation_thanks_message"), parse_mode="Markdown")
    await callback.answer()
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'edit_order', state=Conversation.confirmation)
async def process_edit_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.answer(_('edit_callback_answer'))
    
    user_data = await state.get_data()
    history = user_data.get("history", [])
    history.append({
        "role": "assistant",
        "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑. –£—Ç–æ—á–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å."
    })
    await state.update_data(history=history)
    
    await callback.message.answer(_('edit_prompt_message'))
    await Conversation.active.set()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
